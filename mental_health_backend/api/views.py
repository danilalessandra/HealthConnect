from rest_framework import status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.http import Http404

# Importa tus modelos y serializadores
from .models import User, MoodLog, Recommendation, Content, UserProfile, ContentCategory, EmotionAnalysisResult
from .serializers import (
    UserSerializer, MoodLogSerializer, RecommendationSerializer,
    ContentSerializer, UserProfileSerializer, ContentCategorySerializer,
    EmotionAnalysisResultSerializer
)

# ----------------------------------------------------------------------
# USER
# ----------------------------------------------------------------------

class UserListView(APIView):
    def get(self, request):
        users = User.objects.all()
        serializer = UserSerializer(users, many=True)
        return Response(serializer.data)

class UserDetailView(APIView):
    def get_object(self, pk):
        try:
            return User.objects.get(pk=pk)
        except User.DoesNotExist:
            raise Http404

    def get(self, request, pk):
        user = self.get_object(pk)
        serializer = UserSerializer(user)
        return Response(serializer.data)

# ----------------------------------------------------------------------
# MOOD_LOG
# ----------------------------------------------------------------------

class MoodLogListView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user
        mood_logs = MoodLog.objects.filter(user_id=user)
        serializer = MoodLogSerializer(mood_logs, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = MoodLogSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save(user_id=request.user)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class MoodLogDetailView(APIView):
    permission_classes = [IsAuthenticated]

    def get_object(self, pk):
        try:
            return MoodLog.objects.get(pk=pk)
        except MoodLog.DoesNotExist:
            raise Http404

    def get(self, request, pk):
        mood_log = self.get_object(pk)
        if mood_log.user_id != request.user:
            return Response(status=status.HTTP_403_FORBIDDEN)
        serializer = MoodLogSerializer(mood_log)
        return Response(serializer.data)

    def put(self, request, pk):
        mood_log = self.get_object(pk)
        if mood_log.user_id != request.user:
            return Response(status=status.HTTP_403_FORBIDDEN)
        serializer = MoodLogSerializer(mood_log, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        mood_log = self.get_object(pk)
        if mood_log.user_id != request.user:
            return Response(status=status.HTTP_403_FORBIDDEN)
        mood_log.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# ----------------------------------------------------------------------
# RECOMMENDATION
# ----------------------------------------------------------------------

class RecommendationListView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user
        recommendations = Recommendation.objects.filter(user_id=user)
        serializer = RecommendationSerializer(recommendations, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = RecommendationSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save(user_id=request.user)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class RecommendationDetailView(APIView):
    permission_classes = [IsAuthenticated]

    def get_object(self, pk):
        try:
            return Recommendation.objects.get(pk=pk)
        except Recommendation.DoesNotExist:
            raise Http404

    def get(self, request, pk):
        recommendation = self.get_object(pk)
        if recommendation.user_id != request.user:
            return Response(status=status.HTTP_403_FORBIDDEN)
        serializer = RecommendationSerializer(recommendation)
        return Response(serializer.data)

    def put(self, request, pk):
        recommendation = self.get_object(pk)
        if recommendation.user_id != request.user:
            return Response(status=status.HTTP_403_FORBIDDEN)
        serializer = RecommendationSerializer(recommendation, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        recommendation = self.get_object(pk)
        if recommendation.user_id != request.user:
            return Response(status=status.HTTP_403_FORBIDDEN)
        recommendation.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# ----------------------------------------------------------------------
# CONTENT
# ----------------------------------------------------------------------

class ContentListView(APIView):
    def get(self, request):
        contents = Content.objects.all()
        serializer = ContentSerializer(contents, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = ContentSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class ContentDetailView(APIView):
    def get_object(self, pk):
        try:
            return Content.objects.get(pk=pk)
        except Content.DoesNotExist:
            raise Http404

    def get(self, request, pk):
        content = self.get_object(pk)
        serializer = ContentSerializer(content)
        return Response(serializer.data)

    def put(self, request, pk):
        content = self.get_object(pk)
        serializer = ContentSerializer(content, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        content = self.get_object(pk)
        content.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# ----------------------------------------------------------------------
# USER_PROFILE
# ----------------------------------------------------------------------

class UserProfileListView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        try:
            user_profile = UserProfile.objects.get(user_id=request.user)
            serializer = UserProfileSerializer(user_profile)
            return Response(serializer.data)
        except UserProfile.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)

    def post(self, request):
        serializer = UserProfileSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save(user_id=request.user)  # Asigna el usuario actual
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class UserProfileDetailView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        try:
            user_profile = UserProfile.objects.get(user_id=request.user)
            if user_profile.user_id != request.user:
                return Response(status=status.HTTP_403_FORBIDDEN)
            serializer = UserProfileSerializer(user_profile)
            return Response(serializer.data)
        except UserProfile.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)

    def put(self, request):
        try:
            user_profile = UserProfile.objects.get(user_id=request.user)
            if user_profile.user_id != request.user:
                return Response(status=status.HTTP_403_FORBIDDEN)
            serializer = UserProfileSerializer(user_profile, data=request.data)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except UserProfile.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)

    def delete(self, request):
        try:
            user_profile = UserProfile.objects.get(user_id=request.user)
            if user_profile.user_id != request.user:
                return Response(status=status.HTTP_403_FORBIDDEN)
            user_profile.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        except UserProfile.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)

# ----------------------------------------------------------------------
# CONTENT_CATEGORY
# ----------------------------------------------------------------------

class ContentCategoryListView(APIView):
    def get(self, request):
        categories = ContentCategory.objects.all()
        serializer = ContentCategorySerializer(categories, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = ContentCategorySerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class ContentCategoryDetailView(APIView):
    def get_object(self, pk):
        try:
            return ContentCategory.objects.get(pk=pk)
        except ContentCategory.DoesNotExist:
            raise Http404

    def get(self, request, pk):
        category = self.get_object(pk)
        serializer = ContentCategorySerializer(category)
        return Response(serializer.data)

    def put(self, request, pk):
        category = self.get_object(pk)
        serializer = ContentCategorySerializer(category, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        category = self.get_object(pk)
        category.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# ----------------------------------------------------------------------
# EMOTION_ANALYSIS_RESULT
# ----------------------------------------------------------------------

class EmotionAnalysisResultListView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user
        results = EmotionAnalysisResult.objects.filter(user_id=user)
        serializer = EmotionAnalysisResultSerializer(results, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = EmotionAnalysisResultSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save(user_id=request.user)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class EmotionAnalysisResultDetailView(APIView):
    permission_classes = [IsAuthenticated]

    def get_object(self, pk):
        try:
            return EmotionAnalysisResult.objects.get(pk=pk)
        except EmotionAnalysisResult.DoesNotExist:
            raise Http404

    def get(self, request, pk):
        result = self.get_object(pk)
        if result.user_id != request.user:
            return Response(status=status.HTTP_403_FORBIDDEN)
        serializer = EmotionAnalysisResultSerializer(result)
        return Response(serializer.data)

    def put(self, request, pk):
        result = self.get_object(pk)
        if result.user_id != request.user:
            return Response(status=status.HTTP_403_FORBIDDEN)
        serializer = EmotionAnalysisResultSerializer(result, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        result = self.get_object(pk)
        if result.user_id != request.user:
            return Response(status=status.HTTP_403_FORBIDDEN)
        result.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
from rest_framework import status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.http import Http404

# Importa tus modelos y serializadores
from .models import User, MoodLog, Recommendation, Content, UserProfile, ContentCategory, EmotionAnalysisResult
from .serializers import (
    UserSerializer, MoodLogSerializer, RecommendationSerializer,
    ContentSerializer, UserProfileSerializer, ContentCategorySerializer,
    EmotionAnalysisResultSerializer
)

# api/views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import User
from .serializers import UserSerializer

class UserListView(APIView):
    def get(self, request):
        users = User.objects.all()
        serializer = UserSerializer(users, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = UserSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
import json
from usuarios.models import User, MoodLog
from contenido.models import Content
from recomendaciones.models import Recommendation
from transformers import pipeline, SentenceTransformer
from sentence_transformers import util
class MoodLogListView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user  # Obtén el usuario autenticado
        mood_logs = MoodLog.objects.filter(user_id=user).order_by('-log_date')  # Filtra y ordena
        serializer = MoodLogSerializer(mood_logs, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = MoodLogSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save(user_id=request.user)  # Asocia el registro con el usuario actual
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# Cargar modelos (¡Una vez al inicio!)
analizador_sentimientos = pipeline('sentiment-analysis', model='finiteautomata/beto-sentiment-analysis')
modelo_embeddings = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
generador_texto = pipeline('text-generation', model='EleutherAI/gpt-neo-1.3B')

@csrf_exempt  #  ¡OJO!  Desactivar CSRF solo para desarrollo (¡SEGURIDAD!)
@require_POST  #  Solo acepta peticiones POST
def obtener_recomendaciones_api(request, user_id):
    try:
        data = json.loads(request.body)
        texto_usuario = data.get('texto')
        respuestas_cuestionario = data.get('respuestas')

        recomendaciones = obtener_recomendaciones(user_id, texto_usuario, respuestas_cuestionario)
        return JsonResponse({'recomendaciones': recomendaciones}, status=200)

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def obtener_recomendaciones(user_id, texto_usuario=None, respuestas_cuestionario=None):
    recomendaciones = []

    try:
        usuario = User.objects.get(user_id=user_id)
    except User.DoesNotExist:
        return []  # O manejar el error de otra manera

    # 1. Obtener Información del Usuario
    historial_animo = MoodLog.objects.filter(user=usuario).order_by('-log_date')[:5]  # Últimos 5 registros
    preferencias_usuario = usuario.userprofile.preferencias if hasattr(usuario, 'userprofile') and usuario.userprofile else {}

    sentimiento_predominante = "NEUTRO"
    temas_principales = []

    # 2. Procesamiento con IA
    if texto_usuario:
        sentimiento_predominante = analizar_sentimiento(texto_usuario)

        embeddings_usuario = obtener_embeddings([texto_usuario])
        if embeddings_usuario is not None:
            #  Recomendaciones basadas en similitud semántica
            recursos_similares = obtener_recursos_similares(embeddings_usuario[0])
            recomendaciones.extend(recursos_similares)

        #  Extracción de temas (Ejemplo simple)
        temas_principales = [palabra for palabra in texto_usuario.split() if len(palabra) > 4]

    if respuestas_cuestionario:
        #  Procesar respuestas (Ejemplo simple)
        if respuestas_cuestionario.get('estres') > 5:
            temas_principales.append("estrés")

    # 3. Lógica de Recomendación
    if sentimiento_predominante == "NEGATIVO" or "tristeza" in texto_usuario.lower() or "ansiedad" in texto_usuario.lower():
        recomendaciones.append({"tipo": "ejercicio", "texto": "Prueba la respiración 4-7-8."})
        recomendaciones.append({"tipo": "afirmacion", "texto": generar_texto(f"Genera una afirmación para alguien con {sentimiento_predominante}.", max_length=100)})

    elif sentimiento_predominante == "POSITIVO":
        recomendaciones.append({"tipo": "ejercicio", "texto": "Sal a caminar."})
        recomendaciones.append({"tipo": "afirmacion", "texto": generar_texto(f"Genera una afirmación para alguien que se siente {sentimiento_predominante}.", max_length=100)})
    else:
        recomendaciones.append({"tipo": "general", "texto": "Recuerda descansar."})

    # (Aquí iría lógica más avanzada con historial y preferencias)

    # Guardar las recomendaciones en la base de datos
    for recomendacion in recomendaciones:
        content = None
        texto = None
        if recomendacion['tipo'] == 'recurso':
            content = Content.objects.get(content_id=recomendacion['recurso_id'])
        else:
            texto = recomendacion['texto']
        Recommendation.objects.create(user=usuario, content=content, texto=texto)

    return recomendaciones

def analizar_sentimiento(texto):
    try:
        resultado = analizador_sentimientos(texto)
        return resultado[0]['label']
    except Exception as e:
        print(f"Error al analizar sentimiento: {e}")
        return "NEUTRO"

def obtener_embeddings(textos):
    try:
        embeddings = modelo_embeddings.encode(textos, convert_to_tensor=True)
        return embeddings
    except Exception as e:
        print(f"Error al obtener embeddings: {e}")
        return None

def generar_texto(prompt, max_length=100):
    try:
        resultado = generador_texto(prompt, max_length=max_length)
        return resultado[0]['generated_text']
    except Exception as e:
        print(f"Error al generar texto: {e}")
        return ""

def obtener_recursos_similares(embedding_usuario):
    recursos_similares = []
    for recurso in Content.objects.all():
        if recurso.embedding:
            embedding_recurso = json.loads(recurso.embedding)
            similitud = util.cosine_similarity(embedding_usuario, modelo_embeddings.encode(embedding_recurso, convert_to_tensor=True))[0][0].item()
            if similitud > 0.7:  # Umbral de similitud (ajusta según sea necesario)
                recursos_similares.append({
                    "tipo": "recurso",
                    "texto": recurso.contenido,
                    "recurso_id": recurso.content_id
                })
    return recursos_similares








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































